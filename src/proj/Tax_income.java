/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package proj;

import java.util.List;
import java.util.ArrayList;
import javax.swing.JFrame;

/**
 *
 * @author johnson3yo
 */
public class Tax_income extends javax.swing.JDialog {

    private String[] filling;

    /**
     * Creates new form Tax_income
     */
    public Tax_income(java.awt.Frame parent, boolean modal, String[] filling) {

        super(parent, modal);
        this.filling = filling;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Taxable income");

        jButton1.setText("Ok");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Cancel");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(50, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap(30, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        this.dispose();        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed
    FillingDTO fd = null;
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String tax_inc = this.jTextField1.getText(); // TODO add your handling code here:
        List<FillingDTO> fdo = new ArrayList();

        try {
            if (filling[0].equals("0") & Integer.parseInt(jTextField1.getText()) == 0  ) {
                //Show filling table
                this.dispose();
               new FillingTable(new JFrame(),true).setVisible(true);
            } else if(filling[0].equals("0") & Integer.parseInt(jTextField1.getText()) > 0){
                this.dispose();
                new FillingTable(new JFrame(),true).setVisible(true);
            }else {

                for (int i = 0; i < filling.length; i++) {
                    switch (filling[i]) {

                        case "1":
                            fdo.add(single(jTextField1.getText()));
                            break;
                        case "2":
                            fdo.add(marriedJoint(jTextField1.getText()));
                            break;
                        case "3":
                            fdo.add(marriedSingly(jTextField1.getText()));
                            break;
                        case "4":
                            fdo.add(headOfHousehold(jTextField1.getText()));
                            break;
                     
                        default:
                            break;
                    }

                }
                     this.dispose();
                    new FillingResult(new JFrame(), true, fdo).setVisible(true);
                    
            }

        
        } catch (NumberFormatException no) {

        }

    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

    private FillingDTO single(String text) {

        double total_tax = 0.0;
        double bal = Double.parseDouble(text);

        int amt = Integer.parseInt(text);

        if (amt <= 25000) {

            double f_t = (double) 10 * amt / 100;
            total_tax = total_tax + f_t;
            bal = bal - bal;

        } else {
            if (bal > 0) {
                double f_t = (double) 10 * 25000 / 100;
                total_tax = total_tax + f_t;
                bal = bal - 25000;

            }
            if (bal > 0) {
                double s_t = (double) 15 * bal / 100;
                total_tax = total_tax + s_t;

                bal = bal - 135000;

            }
            if (bal > 0) {
                double s_t = (double) 20 * bal / 100;
                total_tax = total_tax + s_t;
                bal = bal - 380000;

            }
            if (bal > 0) {
                double s_t = (double) 30 * bal / 100;
                total_tax = total_tax + s_t;

                bal = bal - 650000;

            }
            if (bal > 0) {
                double s_t = (double) 34 * bal / 100;
                total_tax = total_tax + s_t;

                bal = bal - 1200000;

            }
            if (bal > 0) {
                double s_t = (double) 38 * bal / 100;
                total_tax = total_tax + s_t;

                bal = bal - bal;
            }

        }
        return new FillingDTO(1, amt, total_tax);

    }

    private FillingDTO marriedJoint(String text) {

        double total_tax = 0.0;
        double bal = Double.parseDouble(text);

        int amt = Integer.parseInt(text);

        if (amt <= 50000) {

            double f_t = (double) 10 * amt / 100;
            total_tax = total_tax + f_t;
            bal = bal - bal;

        } else {
            if (bal > 0) {
                double f_t = (double) 10 * 50000 / 100;
                total_tax = total_tax + f_t;
                bal = bal - 50000;

            }
            if (bal > 0) {
                double s_t = (double) 15 * bal / 100;
                total_tax = total_tax + s_t;

                bal = bal - 265000;

            }
            if (bal > 0) {
                double s_t = (double) 20 * bal / 100;
                total_tax = total_tax + s_t;
                bal = bal - 520000;

            }
            if (bal > 0) {
                double s_t = (double) 30 * bal / 100;
                total_tax = total_tax + s_t;

                bal = bal - 800000;

            }
            if (bal > 0) {
                double s_t = (double) 34 * bal / 100;
                total_tax = total_tax + s_t;

                bal = bal - 1200000;

            }
            if (bal > 0) {
                double s_t = (double) 38 * bal / 100;
                total_tax = total_tax + s_t;

                bal = bal - bal;
            }

        }
        return new FillingDTO(2, amt, total_tax);

    }

    private FillingDTO marriedSingly(String text) {

        double total_tax = 0.0;
        double bal = Double.parseDouble(text);

        int amt = Integer.parseInt(text);

        if (amt <= 25000) {

            double f_t = (double) 10 * amt / 100;
            total_tax = total_tax + f_t;
            bal = bal - bal;

        } else {
            if (bal > 0) {
                double f_t = (double) 10 * 25000 / 100;
                total_tax = total_tax + f_t;
                bal = bal - 25000;

            }
            if (bal > 0) {
                double s_t = (double) 15 * bal / 100;
                total_tax = total_tax + s_t;

                bal = bal - 135000;

            }
            if (bal > 0) {
                double s_t = (double) 20 * bal / 100;
                total_tax = total_tax + s_t;
                bal = bal - 330000;

            }
            if (bal > 0) {
                double s_t = (double) 30 * bal / 100;
                total_tax = total_tax + s_t;

                bal = bal - 600000;

            }
            if (bal > 0) {
                double s_t = (double) 34 * bal / 100;
                total_tax = total_tax + s_t;

                bal = bal - 1000000;

            }
            if (bal > 0) {
                double s_t = (double) 38 * bal / 100;
                total_tax = total_tax + s_t;

                bal = bal - bal;
            }

        }
        return new FillingDTO(3, amt, total_tax);
    }

    private FillingDTO headOfHousehold(String text) {
        double total_tax = 0.0;
        double bal = Double.parseDouble(text);

        int amt = Integer.parseInt(text);

        if (amt <= 35000) {

            double f_t = (double) 10 * amt / 100;
            total_tax = total_tax + f_t;
            bal = bal - bal;

        } else {
            if (bal > 0) {
                double f_t = (double) 10 * 35000 / 100;
                total_tax = total_tax + f_t;
                bal = bal - 25000;

            }
            if (bal > 0) {
                double s_t = (double) 15 * bal / 100;
                total_tax = total_tax + s_t;

                bal = bal - 165000;

            }
            if (bal > 0) {
                double s_t = (double) 20 * bal / 100;
                total_tax = total_tax + s_t;
                bal = bal - 420000;

            }
            if (bal > 0) {
                double s_t = (double) 30 * bal / 100;
                total_tax = total_tax + s_t;

                bal = bal - 700000;

            }
            if (bal > 0) {
                double s_t = (double) 34 * bal / 100;
                total_tax = total_tax + s_t;

                bal = bal - 1200000;

            }
            if (bal > 0) {
                double s_t = (double) 38 * bal / 100;
                total_tax = total_tax + s_t;

                bal = bal - bal;
            }

        }
        return new FillingDTO(4, amt, total_tax);
    }
}
